1 - Para React e JavaScript
    ESLint ‚Äì verifica problemas no c√≥digo JS/React automaticamente
    Prettier ‚Äì Code formatter ‚Äì formata o c√≥digo com atalhos
    React Developer Tools ‚Äì ajuda no desenvolvimento React
    Simple React Snippets ‚Äì gera c√≥digo React com atalhos (rfc, useState, etc.)
	
.vscode/settings.json (opcional)
Cria este ficheiro dentro da pasta .vscode/ do teu projeto:

{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "files.eol": "\n",
  "eslint.format.enable": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}

2. Instalar o Node.js

    Vai at√© o site oficial:    üëâ https://nodejs.org
    Baixa a vers√£o LTS (recomendada) para Windows.
    Instala normalmente. Durante a instala√ß√£o, marca a op√ß√£o que adiciona o Node ao PATH.
	

3. Instalar Prettier e ESLint no projeto (opcional mas recomendado) /Receitas/

Dentro da pasta do projeto:
	# /Receitas
	(Se necess√°rio ativar scripts: 
	Set-ExecutionPolicy RemoteSigned
	Do you want to change the execution policy?
	[Y] Yes  [A] Yes to All  [N] No  ...)

	npm install --save-dev eslint prettier
	npx eslint --init

	Escolhe as op√ß√µes como:
		To check syntax and find problems
		JavaScript modules (import/export)
		React
		Use a popular style guide (ex: Airbnb)
		JSON config file




4 - Estrutura geral do projeto

Receitas/
‚îÇ
‚îú‚îÄ‚îÄ backend/
‚îÇ	‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ	‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ	‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ	‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ	‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ	‚îú‚îÄ‚îÄ server.js
‚îÇ	‚îú‚îÄ‚îÄ .env
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ
‚îú‚îÄ‚îÄ frontend/          ‚Üê React App
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.js
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ
‚îî‚îÄ‚îÄ README.md

5.1.1 - Criar o projeto Node.js (Receitas/)
	#	../Receitas
	#	mkdir backend (cria diret√≥rio)
	#	cd backend (muda de diret√≥rio)
	#	npm init -y
	#	npm install express mysql2 sequelize dotenv cors
	#	npm install --save-dev nodemon

5.1.2 - Vari√°veis de ambiente 
	#	../Receitas/backend
	#	type nul > .env (cria ficheiro)
	** Conte√∫do:
    DB_HOST=localhost
	DB_TYPE=mysql
	DB_NAME=recipes
	DB_USER=internal_user
	DB_PASSWORD="#KgD32581kjhdjssdhdjkdhskahdskjjhasdkjjh"
	DB_PORT=3306
	SECRET_KEY=KgD32581kjhdjssdhdjkdhskahdskjjhasdkjjh

5.1.3 - Liga√ß√£o MySQL 
	#	../Receitas/backend
	#   mkdir src (cria diret√≥rio)
	#	cd src (muda de diret√≥rio)
	#	mkdir config (cria diret√≥rio)
	#	cd config (muda de diret√≥rio)
	#	type nul > database.js (cria ficheiro)
	#	Receitas/backend/config/database.js
	** Conte√∫do:
	import { Sequelize } from 'sequelize';
	import dotenv from 'dotenv';
	dotenv.config();

	const sequelize = new Sequelize(
	  process.env.DB_NAME,
	  process.env.DB_USER,
	  process.env.DB_PASSWORD,
	  {
		host: process.env.DB_HOST,
		dialect: 'mysql',
		port: process.env.DB_PORT
	  }
	);
	
	export default sequelize;

5.1.4 - Estrutura base (server.js) 
	#	cd ..  (diret√≥rio anterior)
	#	type nul > server.js (cria ficheiro)
	#	Receitas/backend/src/server.js
	** Conte√∫do
	import express from 'express';
	import cors from 'cors';
	const server = express();
	import sequelize from './config/database.js';
	import authRoutes from './routes/authRoutes';

	// Middleware
	server.use(cors());
	server.use(express.json());

	server.get('/', (req, res) => {
	  res.send('API de Receitas no ar');
	});

	// Iniciar servidor
	const PORT = 5000;
	server.listen(PORT, async () => {
		try {
		await sequelize.authenticate();
		console.log('Conex√£o ao MySQL estabelecida com sucesso!');
		console.log(`Servidor iniciado na porta ${PORT}`);
		} catch (error) {
			console.error('Erro na conex√£o ao MySQL:', error);
		}
	});

	server.use('/api/auth', authRoutes);


5.1.5 - Modelos com Sequelize 
	#	mkdir models
	#	cd models
	#	type nul > User.js
	#	Receitas/backend/src/models/User.js
	** Conte√∫do:
	import { DataTypes } from 'sequelize';
	import sequelize from '../config/database';

	const User = sequelize.define('user', {
	  username: { type: DataTypes.STRING, allowNull: false, unique: true },
	  firstname: { type: DataTypes.STRING, allowNull: false },
	  lastname: { type: DataTypes.STRING, allowNull: false },
	  password: { type: DataTypes.STRING, allowNull: false },
	  email: { type: DataTypes.STRING, allowNull: false, unique: true },
	  tokem: { type: DataTypes.STRING, allowNull: false },
	  active: { type: DataTypes.BOOLEAN, defaultValue: false },
	  is_admin: { type: DataTypes.BOOLEAN, defaultValue: false },
	  created_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
	  updated_at: { type: DataTypes.DATE },
	  updated_by: { type: DataTypes.INTEGER }
	}, {
	  timestamps: false,
	  tableName: 'user'
	});

	module.exports = User;


5.1.6 - Controladores 
	#	cd ..
	#	mkdir controllers/
	#	cd controllers/
	#	type nul > userController.js
	#	Receitas/backend/src/controllers/userController.js
	** Conte√∫do:
	import User from '../models/User';

	exports.getAllUsers = async (req, res) => {
	  try {
		const users = await User.findAll();
		res.json(users);
	  } catch (err) {
		res.status(500).json({ error: err.message });
	  }
	};

5.1.7 - Rotas 
	#	cd ..
	#	mkdir routes
	#	cd routes
	#	type nul > userRoutes.js
	#	Receitas/backend/src/routes/userRoutes.js
	** Conte√∫do:
	import express from 'express';
	const router = express.Router();
	import userController from '../controllers/userController';

	router.get('/', userController.getAllUsers);
	
	module.exports = router;


6 Frontend (React)

6.1 - Criar a app React
	#	cd ..
	#	cd ..
	#	cd ..
	#	npx create-react-app frontend
	#	cd frontend
	#	npm install axios react-router-dom
	
6.1.1 Atualizar
	#	npm audit fix --force

6.2 - Adicionar rotas 
	#	cd frontend/src
	#	type nul > App.js
	#	Receitas/frontend/src/App.js
	** Conte√∫do:
	import React, { useEffect, useState } from 'react';
	import axios from 'axios';

	function App() {
	  const [users, setUsers] = useState([]);

	  useEffect(() => {
		axios.get('http://localhost:5000/api/users')
		  .then(res => setUsers(res.data))
		  .catch(err => console.error(err));
	  }, []);

	  return (
		<div>
		  <h1>Utilizadores</h1>
		  <ul>
			{users.map(user => (
			  <li key={user.id}>{user.firstname} {user.lastname}</li>
			))}
		  </ul>
		</div>
	  );
	}

	export default App;

7.1 - Iniciar backend
	#	cd Receitas/backend
	#	npx nodemon backend/src/server.js

7.2 - Iniciar frontend
	#	cd Receitas/frontend
	#	npm start


	
8 - Implementar Login e Register com JWT no teu backend Node.js com Express e Sequelize. Aqui est√° a estrutura completa em passos claros:
8.1 - Instalar depend√™ncias
	#	Receitas/backend
	#	npm install bcrypt jsonwebtoken

8.2 - Criar controlador
	#	cd src/controllers
	#	type nul > authController.js
	#	Receitas/backend/src/controllers/authController.js
	** Conte√∫do:
	import User from '../models/User';
	import bcrypt from 'bcrypt';
	import jwt from 'jsonwebtoken';

	const SECRET_KEY = process.env.SECRET_KEY;

	exports.register = async (req, res) => {
	  try {
		const { username, firstname, lastname, email, password } = req.body;
		
		// Verificar se j√° existe utilizador
		const existingUser = await User.findOne({ where: { username } });
		if (existingUser) return res.status(400).json({ message: 'Username j√° existe.' });

		const hashedPassword = await bcrypt.hash(password, 10);
		const user = await User.create({
		  username,
		  firstname,
		  lastname,
		  email,
		  password: hashedPassword
		});

		res.status(201).json({ message: 'Utilizador registado com sucesso.' });
	  } catch (error) {
		res.status(500).json({ error: error.message });
	  }
	};

	exports.login = async (req, res) => {
	  try {
		const { username, password } = req.body;

		const user = await User.findOne({ where: { username } });
		if (!user) return res.status(404).json({ message: 'Utilizador n√£o encontrado.' });

		const match = await bcrypt.compare(password, user.password);
		if (!match) return res.status(401).json({ message: 'Palavra-passe incorreta.' });

		const token = jwt.sign(
		  { id: user.id, username: user.username, is_admin: user.is_admin },
		  SECRET_KEY,
		  { expiresIn: '1h' }
		);

		res.json({ token });
	  } catch (error) {
		res.status(500).json({ error: error.message });
	  }
	};

8.3 - Criar Routes
	#	cd ..
	#	cd routes
	#	type nul > authRoutes.js
	#	Receitas/backend/src/routes/authRoutes.js
	** Conte√∫do:
	import express from 'express';
	const router = express.Router();
	import authController from '../controllers/authController';

	router.post('/register', authController.register);
	router.post('/login', authController.login);

	module.exports = router;

8.4 - Importar as rotas no server.js
	#	cd ..
	#	Receitas/backend/src/server.js
	** Conte√∫do:
	import authRoutes from './routes/authRoutes';
	server.use('/api/auth', authRoutes);

9.1 - Exemplo de chamadas no frontend (React)
	#	cd ..
	#	cd ..
	#	cd ..
	#	cd frontend/src
	#	Receitas/frontend/src/server.js
	** Conte√∫do:

9.2 Middleware para rotas protegidas (opcional)
	#	cd ..
	#	cd ..
	#	cd backend/src
	#	mkdir middleware
	#	cd middleware
	#	type nul > authMiddleware.js
	** Conte√∫do:
	const jwt = require('jsonwebtoken');
	const SECRET_KEY = 'segredo_super_secreto';

	module.exports = (req, res, next) => {
	  const authHeader = req.headers.authorization;
	  if (!authHeader) return res.status(401).json({ message: 'Token n√£o fornecido.' });

	  const token = authHeader.split(' ')[1];
	  try {
		const decoded = jwt.verify(token, SECRET_KEY);
		req.user = decoded;
		next();
	  } catch (err) {
		res.status(401).json({ message: 'Token inv√°lido.' });
	  }
	};


9.3 Criar estrutura do frontend
	#	cd ..
	#	cd ..
	#	cd frontend
	#	npm install axios react-router-dom

9.4 Criar contexto de autentica√ß√£o (AuthContext)
	#	cd src
	#	mkdir context
	#	cd context
	#	type nul > AuthContext.js
	#	Receitas/frontend/src/context/AuthContext.js
	** Conte√∫do:
	import { createContext, useState, useEffect } from 'react';

	export const AuthContext = createContext();

	export const AuthProvider = ({ children }) => {
	  const [token, setToken] = useState(localStorage.getItem('token') || null);
	  const [user, setUser] = useState(null);

	  const login = (token) => {
		localStorage.setItem('token', token);
		setToken(token);
	  };

	  const logout = () => {
		localStorage.removeItem('token');
		setToken(null);
		setUser(null);
	  };

	  useEffect(() => {
		if (token) {
		  // Decodifica o token (se quiseres mostrar info do user)
		  const payload = JSON.parse(atob(token.split('.')[1]));
		  setUser(payload);
		}
	  }, [token]);

	  return (
		<AuthContext.Provider value={{ token, user, login, logout }}>
		  {children}
		</AuthContext.Provider>
	  );
	};

9.5 - Envolver App.js com o AuthProvider
	#	cd ..
	#	Receitas/frontend/src/App.js
	** Noco conte√∫do

	import { BrowserRouter, Routes, Route } from 'react-router-dom';
	import { AuthProvider } from './context/AuthContext';
	import Login from './pages/Login';
	import Register from './pages/Register';
	import Dashboard from './pages/Dashboard';
	import PrivateRoute from './components/PrivateRoute';

	function App() {
	  return (
		<AuthProvider>
		  <BrowserRouter>
			<Routes>
			  <Route path="/login" element={<Login />} />
			  <Route path="/register" element={<Register />} />
			  <Route
				path="/dashboard"
				element={<PrivateRoute><Dashboard /></PrivateRoute>}
			  />
			</Routes>
		  </BrowserRouter>
		</AuthProvider>
	  );
	}

	export default App;

9.6 Criar componente PrivateRoute.js
	/	Receitas/frontend/src
	#	mkdir components
	#	cd components
	#	type nul > PrivateRoute
	/	Receitas/frontend/src/components/PrivateRoute.js:
	?	Conte√∫do:
	import { useContext } from 'react';
	import { Navigate } from 'react-router-dom';
	import { AuthContext } from '../context/AuthContext';

	const PrivateRoute = ({ children }) => {
	  const { token } = useContext(AuthContext);
	  return token ? children : <Navigate to="/login" />;
	};

	export default PrivateRoute;

9.7 Criar p√°gina Login.js
	/	Receitas/frontend/src
	#	mkdir pages
	#	cd pages
	#	type nul > Login.j
	/	Receitas/frontend/src/pages/Login.js
	?	Conte√∫do:
	import { useState, useContext } from 'react';
	import axios from 'axios';
	import { AuthContext } from '../context/AuthContext';
	import { useNavigate } from 'react-router-dom';

	function Login() {
	  const [form, setForm] = useState({ username: '', password: '' });
	  const { login } = useContext(AuthContext);
	  const navigate = useNavigate();

	  const handleSubmit = async (e) => {
		e.preventDefault();
		try {
		  const res = await axios.post('http://localhost:5000/api/auth/login', form);
		  login(res.data.token);
		  navigate('/dashboard');
		} catch (err) {
		  alert(err.response.data.message);
		}
	  };

	  return (
		<form onSubmit={handleSubmit}>
		  <h2>Login</h2>
		  <input type="text" placeholder="Username" value={form.username}
			onChange={(e) => setForm({ ...form, username: e.target.value })} />
		  <input type="password" placeholder="Password" value={form.password}
			onChange={(e) => setForm({ ...form, password: e.target.value })} />
		  <button type="submit">Entrar</button>
		</form>
	  );
	}

	export default Login;

9.8 - Criar p√°gina Register.js
	/	Receitas/frontend/src/pages
	#	type nul > Register.js
	/	Receitas/frontend/src/pages/Register.js
	?	Conte√∫do:
	import { useState } from 'react';
	import axios from 'axios';
	import { useNavigate } from 'react-router-dom';

	function Register() {
	  const [form, setForm] = useState({
		username: '', firstname: '', lastname: '', email: '', password: ''
	  });
	  const navigate = useNavigate();

	  const handleSubmit = async (e) => {
		e.preventDefault();
		try {
		  await axios.post('http://localhost:5000/api/auth/register', form);
		  alert('Registado com sucesso!');
		  navigate('/login');
		} catch (err) {
		  alert(err.response.data.message);
		}
	  };

	  return (
		<form onSubmit={handleSubmit}>
		  <h2>Registar</h2>
		  <input type="text" placeholder="Username" value={form.username}
			onChange={(e) => setForm({ ...form, username: e.target.value })} />
		  <input type="text" placeholder="Nome" value={form.firstname}
			onChange={(e) => setForm({ ...form, firstname: e.target.value })} />
		  <input type="text" placeholder="Apelido" value={form.lastname}
			onChange={(e) => setForm({ ...form, lastname: e.target.value })} />
		  <input type="email" placeholder="Email" value={form.email}
			onChange={(e) => setForm({ ...form, email: e.target.value })} />
		  <input type="password" placeholder="Password" value={form.password}
			onChange={(e) => setForm({ ...form, password: e.target.value })} />
		  <button type="submit">Criar Conta</button>
		</form>
	  );
	}

	export default Register;

9.9 -  Criar Dashboard.js
	/	Receitas/frontend/src/pages
	#	type nul > Dashboard.js
	/	Receitas/frontend/src/pages
	?	conte√∫do:
	import { useContext } from 'react';
	import { AuthContext } from '../context/AuthContext';

	function Dashboard() {
	  const { user, logout } = useContext(AuthContext);

	  return (
		<div>
		  <h2>Ol√°, {user?.username}</h2>
		  <p>Bem-vindo ao painel!</p>
		  <button onClick={logout}>Sair</button>
		</div>
	  );
	}

	export default Dashboard;

9.10 Instalar depend√™ncias para envio de email
	/	Receitas/backend
	#	npm install nodemailer

9.10.1 Alterar o ficheiro .env
	/	Receitas/backend/.env
	? Acrescetar ao ficheiro:
	EMAIL_USER: receitasculinaria25@gmail.com'
	EMAIL_PASS: *Tashare25_a
	
9.10.2 Criar fun√ß√£o de envio de email (utils/sendEmail.js)
	/	Receitas/backend/src
	#	mkdir utils
	#	cd utils
	#	type nul > sendEmail.js
	/	Receitas/backend/src/utils/sendEmail.js
	?	Conte√∫do:
	import nodemailer from 'nodemailer';

	const sendEmail = async (to, subject, html) => {
	  const transporter = nodemailer.createTransport({
		service: 'gmail',
		auth: {
		  user: process.env.EMAIL_USER,
		  pass: process.env.EMAIL_PASS,
		},
	  });

	  await transporter.sendMail({
		from: '"Receitas App" <receitasculinaria25@gmail.com>',
		to,
		subject,
		html,
	  });
	};

	export default sendEmail;


9.11 Gerar token e enviar no authController.js (no register)
	/	Receitas/backend/src/controllers/authController.js
	?	Alterar o conte√∫do para:
	import User from '../models/User';
	import bcrypt from 'bcrypt';
	import jwt from 'jsonwebtoken';
	import sendEmail from '../utils/sendEmail.js'; // Assumindo que usas ESModules (import/export)

	const SECRET_KEY = process.env.SECRET_KEY || 'segredo_super_secreto';

	// REGISTO DE UTILIZADOR
	export const register = async (req, res) => {
	  try {
		const { username, firstname, lastname, email, password } = req.body;

		// Verificar se j√° existe utilizador
		const existingUser = await User.findOne({ where: { username } });
		if (existingUser) return res.status(400).json({ message: 'Username j√° existe.' });

		// Criar utilizador com password encriptada
		const hashedPassword = await bcrypt.hash(password, 10);
		const user = await User.create({
		  username,
		  firstname,
		  lastname,
		  email,
		  password: hashedPassword,
		  active: false, // ainda n√£o ativado
		});

		// Gerar token de ativa√ß√£o
		const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: '1d' });

		// Gerar link de ativa√ß√£o
		const activationLink = `http://localhost:5000/api/auth/activate?token=${token}`;
		const emailContent = `
		  <h3>Bem-vindo(a), ${firstname}!</h3>
		  <p>Por favor, ativa a tua conta clicando no link abaixo:</p>
		  <a href="${activationLink}">Ativar Conta</a>
		`;

		// Enviar email
		await sendEmail(user.email, 'Confirma√ß√£o de Conta', emailContent);

		res.status(201).json({ message: 'Conta criada. Verifica o teu email para ativa√ß√£o.' });
	  } catch (error) {
		console.error(error);
		res.status(500).json({ error: error.message });
	  }
	};

	// LOGIN
	export const login = async (req, res) => {
	  try {
		const { username, password } = req.body;

		const user = await User.findOne({ where: { username } });
		if (!user) return res.status(404).json({ message: 'Utilizador n√£o encontrado.' });

		if (!user.active)
		  return res.status(403).json({ message: 'Conta ainda n√£o foi ativada.' });

		const match = await bcrypt.compare(password, user.password);
		if (!match) return res.status(401).json({ message: 'Palavra-passe incorreta.' });

		const token = jwt.sign(
		  { id: user.id, username: user.username, is_admin: user.is_admin },
		  SECRET_KEY,
		  { expiresIn: '1h' }
		);

		res.json({ token });
	  } catch (error) {
		res.status(500).json({ error: error.message });
	  }
	};

	// ATIVA√á√ÉO DE CONTA
	export const activate = async (req, res) => {
	  const { token } = req.query;
	  try {
		const decoded = jwt.verify(token, SECRET_KEY);
		const user = await User.findByPk(decoded.id);

		if (!user) return res.status(404).json({ message: 'Utilizador n√£o encontrado.' });

		user.active = true;
		await user.save();

		res.json({ message: 'Conta ativada com sucesso!' });
	  } catch (error) {
		res.status(400).json({ message: 'Token inv√°lido ou expirado.' });
	  }
	};

9.12 Rota de ativa√ß√£o (routes/authRoutes.js)
	/	Receitas/backend/src/routes/authRoutes.js
	?	Alterar o conte√∫do para:
	import express from 'express';
	import { register, login, activate } from '../controllers/authController.js';

	const router = express.Router();

	router.post('/register', register);
	router.post('/login', login);
	router.get('/activate', activate); // Confirma√ß√£o via token do email

	export default router;


9.13 Criar p√°gina de ativa√ß√£o
	/	Receitas/frontend/src/pages
	#	type nul > ActivateAccount.jxs
	/	Receitas/frontend/src/pages/ActivateAccount.jsx
	? Conte√∫do:
	import { useEffect, useState } from 'react';
	import { useSearchParams, useNavigate } from 'react-router-dom';
	import axios from 'axios';

	function ActivateAccount() {
	  const [status, setStatus] = useState('A verificar...');
	  const [searchParams] = useSearchParams();
	  const navigate = useNavigate();

	  useEffect(() => {
		const token = searchParams.get('token');

		if (!token) {
		  setStatus('Token n√£o fornecido.');
		  return;
		}

		axios
		  .get(`http://localhost:5000/api/auth/activate?token=${token}`)
		  .then((res) => {
			setStatus(res.data.message);
			setTimeout(() => navigate('/login'), 3000); // Redireciona ap√≥s ativa√ß√£o
		  })
		  .catch((err) => {
			setStatus(err.response?.data?.message || 'Erro ao ativar conta.');
		  });
	  }, [searchParams, navigate]);

	  return (
		<div>
		  <h2>Ativa√ß√£o de Conta</h2>
		  <p>{status}</p>
		</div>
	  );
	}

	export default ActivateAccount;

