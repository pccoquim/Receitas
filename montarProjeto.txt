 1 - Para React e JavaScript

    ESLint – verifica problemas no código JS/React automaticamente

    Prettier – Code formatter – formata o código com atalhos

    React Developer Tools – ajuda no desenvolvimento React

    Simple React Snippets – gera código React com atalhos (rfc, useState, etc.)

🔹 Para Node.js

    Node.js Extension Pack – inclui suporte ao debugger, npm scripts, etc.

🔹 Para trabalhar com MySQL

    SQLTools

        Liga-te à base de dados MySQL diretamente do VSCode

        Precisas da extensão: SQLTools MySQL/MariaDB Driver

🔹 Para testar APIs

    REST Client – permite testar endpoints REST diretamente no VSCode
    Alternativa externa: Postman
	
.vscode/settings.json (opcional)

Cria este ficheiro dentro da pasta .vscode/ do teu projeto:

{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "files.eol": "\n",
  "eslint.format.enable": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}

3. Instalar Prettier e ESLint no projeto (opcional mas recomendado)

Dentro da pasta do projeto:
(Se necessário ativar scripts: 
Set-ExecutionPolicy RemoteSigned
Do you want to change the execution policy?
[Y] Yes  [A] Yes to All  [N] No  ...)


npm install --save-dev eslint prettier
npx eslint --init

Escolhe as opções como:

    To check syntax and find problems

    JavaScript modules (import/export)

    React

    Use a popular style guide (ex: Airbnb)

    JSON config file
	
4 Instalar o Node.js

    Vai até o site oficial:
    👉 https://nodejs.org

    Baixa a versão LTS (recomendada) para Windows.

    Instala normalmente. Durante a instalação, marca a opção que adiciona o Node ao PATH.

5.1 - Estrutura geral do projeto

Receitas/
│
├── backend/
│	├── src/
│   │	├── controllers/
│   │	├── models/
│   │	├── routes/
│   │	├── config/
│   │	├── app.js
│	├── .env
│   └── package.json
│
├── frontend/          ← React App
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   └── app.js
│   └── package.json
│
└── README.md

5.1.1 - Criar o projeto Node.js (Receitas/)
	mkdir backend
	cd backend
	npm init -y
	npm install express mysql2 sequelize dotenv cors
	npm install --save-dev nodemon

5.1.2 - Variáveis de ambiente # Receitas/backend/.env
	DB_NAME=recipes
	DB_USER=internal_user
	DB_PASSWORD=#KgD32581kjhdjssdhdjkdhskahdskjjhasdkjjh
	DB_PORT=3306

5.1.3 - Ligação MySQL #	Receitas/backend/config/database.js
	const { Sequelize } = require('sequelize');
	require('dotenv').config();

	const sequelize = new Sequelize(
	  process.env.DB_NAME,
	  process.env.DB_USER,
	  process.env.DB_PASSWORD,
	  {
		host: process.env.DB_HOST,
		dialect: 'mysql',
		port: process.en.DB_PORT
	  }
	);
	
	module.exports = sequelize;

5.1.4 - Estrutura base (app.js) # Receitas/backend/src/app.js
	const express = require('express');
	const cors = require('cors');
	const app = express();
	const sequelize = require('./config/database');

	// Middleware
	app.use(cors());
	app.use(express.json());

	// Importar rotas aqui futuramente

	// Iniciar servidor
	const PORT = 5000;
	app.listen(PORT, async () => {
	  try {
		await sequelize.authenticate();
		console.log('Conexão ao MySQL estabelecida com sucesso!');
		console.log(`Servidor iniciado na porta ${PORT}`);
	  } catch (error) {
		console.error('Erro na conexão ao MySQL:', error);
	  }
	});


5.1.5 - Modelos com Sequelize # Receitas/backend/models/User.js
	const { DataTypes } = require('sequelize');
	const sequelize = require('../config/database');

	const User = sequelize.define('user', {
	  username: { type: DataTypes.STRING, allowNull: false, unique: true },
	  firstname: { type: DataTypes.STRING, allowNull: false },
	  lastname: { type: DataTypes.STRING, allowNull: false },
	  password: { type: DataTypes.STRING, allowNull: false },
	  email: { type: DataTypes.STRING, allowNull: false, unique: true },
	  tokem: { type: DataTypes.STRING, allowNull: false },
	  active: { type: DataTypes.BOOLEAN, defaultValue: false },
	  is_admin: { type: DataTypes.BOOLEAN, defaultValue: false },
	  created_at: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
	  updated_at: { type: DataTypes.DATE },
	  updated_by: { type: DataTypes.INTEGER }
	}, {
	  timestamps: false,
	  tableName: 'user'
	});

	module.exports = User;


5.1.6 - Controladores # Receitas/backend/controllers/userController.js
	const User = require('../models/User');

	exports.getAllUsers = async (req, res) => {
	  try {
		const users = await User.findAll();
		res.json(users);
	  } catch (err) {
		res.status(500).json({ error: err.message });
	  }
	};

5.1.7 - Rotas # Receitas/backend/routes/userRoutes.js
	const express = require('express');
	const router = express.Router();
	const userController = require('../controllers/userController');

	router.get('/', userController.getAllUsers);
	module.exports = router;

6 Frontend (React)
6.1 - Criar a app React
	npx create-react-app frontend
	cd frontend
	npm install axios react-router-dom

6.2 - Adicionar rotas # Receitas/frontend/src/App.js
	import React, { useEffect, useState } from 'react';
	import axios from 'axios';

	function App() {
	  const [users, setUsers] = useState([]);

	  useEffect(() => {
		axios.get('http://localhost:5000/api/users')
		  .then(res => setUsers(res.data))
		  .catch(err => console.error(err));
	  }, []);

	  return (
		<div>
		  <h1>Utilizadores</h1>
		  <ul>
			{users.map(user => (
			  <li key={user.id}>{user.firstname} {user.lastname}</li>
			))}
		  </ul>
		</div>
	  );
	}

	export default App;

7.1 - Iniciar backend
	cd Receitas/backend
	npx nodemon src/app.js

7.2 - Iniciar frontend
	cd Receitas/frontend
	npm start

